// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: powerstream.proto

package ecoflow2db

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InverterHeartbeat struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	InvErrorCode           *uint32                `protobuf:"varint,1,opt,name=inv_error_code,json=invErrorCode,proto3,oneof" json:"inv_error_code,omitempty"`
	InvWarningCode         *uint32                `protobuf:"varint,3,opt,name=inv_warning_code,json=invWarningCode,proto3,oneof" json:"inv_warning_code,omitempty"`
	Pv1ErrorCode           *uint32                `protobuf:"varint,2,opt,name=pv1_error_code,json=pv1ErrorCode,proto3,oneof" json:"pv1_error_code,omitempty"`
	Pv1WarningCode         *uint32                `protobuf:"varint,4,opt,name=pv1_warning_code,json=pv1WarningCode,proto3,oneof" json:"pv1_warning_code,omitempty"`
	Pv2ErrorCode           *uint32                `protobuf:"varint,5,opt,name=pv2_error_code,json=pv2ErrorCode,proto3,oneof" json:"pv2_error_code,omitempty"`
	Pv2WarningCode         *uint32                `protobuf:"varint,6,opt,name=pv2_warning_code,json=pv2WarningCode,proto3,oneof" json:"pv2_warning_code,omitempty"`
	BatErrorCode           *uint32                `protobuf:"varint,7,opt,name=bat_error_code,json=batErrorCode,proto3,oneof" json:"bat_error_code,omitempty"`
	BatWarningCode         *uint32                `protobuf:"varint,8,opt,name=bat_warning_code,json=batWarningCode,proto3,oneof" json:"bat_warning_code,omitempty"`
	LlcErrorCode           *uint32                `protobuf:"varint,9,opt,name=llc_error_code,json=llcErrorCode,proto3,oneof" json:"llc_error_code,omitempty"`
	LlcWarningCode         *uint32                `protobuf:"varint,10,opt,name=llc_warning_code,json=llcWarningCode,proto3,oneof" json:"llc_warning_code,omitempty"`
	Pv1Status              *uint32                `protobuf:"varint,11,opt,name=pv1_status,json=pv1Status,proto3,oneof" json:"pv1_status,omitempty"`
	Pv2Status              *uint32                `protobuf:"varint,12,opt,name=pv2_status,json=pv2Status,proto3,oneof" json:"pv2_status,omitempty"`
	BatStatus              *uint32                `protobuf:"varint,13,opt,name=bat_status,json=batStatus,proto3,oneof" json:"bat_status,omitempty"`
	LlcStatus              *uint32                `protobuf:"varint,14,opt,name=llc_status,json=llcStatus,proto3,oneof" json:"llc_status,omitempty"`
	InvStatus              *uint32                `protobuf:"varint,15,opt,name=inv_status,json=invStatus,proto3,oneof" json:"inv_status,omitempty"`
	Pv1InputVolt           *int32                 `protobuf:"varint,16,opt,name=pv1_input_volt,json=pv1InputVolt,proto3,oneof" json:"pv1_input_volt,omitempty"`
	Pv1OpVolt              *int32                 `protobuf:"varint,17,opt,name=pv1_op_volt,json=pv1OpVolt,proto3,oneof" json:"pv1_op_volt,omitempty"`
	Pv1InputCur            *int32                 `protobuf:"varint,18,opt,name=pv1_input_cur,json=pv1InputCur,proto3,oneof" json:"pv1_input_cur,omitempty"`
	Pv1InputWatts          *int32                 `protobuf:"varint,19,opt,name=pv1_input_watts,json=pv1InputWatts,proto3,oneof" json:"pv1_input_watts,omitempty"`
	Pv1Temp                *int32                 `protobuf:"varint,20,opt,name=pv1_temp,json=pv1Temp,proto3,oneof" json:"pv1_temp,omitempty"`
	Pv2InputVolt           *int32                 `protobuf:"varint,21,opt,name=pv2_input_volt,json=pv2InputVolt,proto3,oneof" json:"pv2_input_volt,omitempty"`
	Pv2OpVolt              *int32                 `protobuf:"varint,22,opt,name=pv2_op_volt,json=pv2OpVolt,proto3,oneof" json:"pv2_op_volt,omitempty"`
	Pv2InputCur            *int32                 `protobuf:"varint,23,opt,name=pv2_input_cur,json=pv2InputCur,proto3,oneof" json:"pv2_input_cur,omitempty"`
	Pv2InputWatts          *int32                 `protobuf:"varint,24,opt,name=pv2_input_watts,json=pv2InputWatts,proto3,oneof" json:"pv2_input_watts,omitempty"`
	Pv2Temp                *int32                 `protobuf:"varint,25,opt,name=pv2_temp,json=pv2Temp,proto3,oneof" json:"pv2_temp,omitempty"`
	BatInputVolt           *int32                 `protobuf:"varint,26,opt,name=bat_input_volt,json=batInputVolt,proto3,oneof" json:"bat_input_volt,omitempty"`
	BatOpVolt              *int32                 `protobuf:"varint,27,opt,name=bat_op_volt,json=batOpVolt,proto3,oneof" json:"bat_op_volt,omitempty"`
	BatInputCur            *int32                 `protobuf:"varint,28,opt,name=bat_input_cur,json=batInputCur,proto3,oneof" json:"bat_input_cur,omitempty"`
	BatInputWatts          *int32                 `protobuf:"varint,29,opt,name=bat_input_watts,json=batInputWatts,proto3,oneof" json:"bat_input_watts,omitempty"`
	BatTemp                *int32                 `protobuf:"varint,30,opt,name=bat_temp,json=batTemp,proto3,oneof" json:"bat_temp,omitempty"`
	BatSoc                 *uint32                `protobuf:"varint,31,opt,name=bat_soc,json=batSoc,proto3,oneof" json:"bat_soc,omitempty"`
	LlcInputVolt           *int32                 `protobuf:"varint,32,opt,name=llc_input_volt,json=llcInputVolt,proto3,oneof" json:"llc_input_volt,omitempty"`
	LlcOpVolt              *int32                 `protobuf:"varint,33,opt,name=llc_op_volt,json=llcOpVolt,proto3,oneof" json:"llc_op_volt,omitempty"`
	LlcTemp                *int32                 `protobuf:"varint,34,opt,name=llc_temp,json=llcTemp,proto3,oneof" json:"llc_temp,omitempty"`
	InvInputVolt           *int32                 `protobuf:"varint,35,opt,name=inv_input_volt,json=invInputVolt,proto3,oneof" json:"inv_input_volt,omitempty"`
	InvOpVolt              *int32                 `protobuf:"varint,36,opt,name=inv_op_volt,json=invOpVolt,proto3,oneof" json:"inv_op_volt,omitempty"`
	InvOutputCur           *int32                 `protobuf:"varint,37,opt,name=inv_output_cur,json=invOutputCur,proto3,oneof" json:"inv_output_cur,omitempty"`
	InvOutputWatts         *int32                 `protobuf:"varint,38,opt,name=inv_output_watts,json=invOutputWatts,proto3,oneof" json:"inv_output_watts,omitempty"`
	InvTemp                *int32                 `protobuf:"varint,39,opt,name=inv_temp,json=invTemp,proto3,oneof" json:"inv_temp,omitempty"`
	InvFreq                *int32                 `protobuf:"varint,40,opt,name=inv_freq,json=invFreq,proto3,oneof" json:"inv_freq,omitempty"`
	InvDcCur               *int32                 `protobuf:"varint,41,opt,name=inv_dc_cur,json=invDcCur,proto3,oneof" json:"inv_dc_cur,omitempty"`
	BpType                 *int32                 `protobuf:"varint,42,opt,name=bp_type,json=bpType,proto3,oneof" json:"bp_type,omitempty"`
	InvRelayStatus         *int32                 `protobuf:"varint,43,opt,name=inv_relay_status,json=invRelayStatus,proto3,oneof" json:"inv_relay_status,omitempty"`
	Pv1RelayStatus         *int32                 `protobuf:"varint,44,opt,name=pv1_relay_status,json=pv1RelayStatus,proto3,oneof" json:"pv1_relay_status,omitempty"`
	Pv2RelayStatus         *int32                 `protobuf:"varint,45,opt,name=pv2_relay_status,json=pv2RelayStatus,proto3,oneof" json:"pv2_relay_status,omitempty"`
	InstallCountry         *uint32                `protobuf:"varint,46,opt,name=install_country,json=installCountry,proto3,oneof" json:"install_country,omitempty"`
	InstallTown            *uint32                `protobuf:"varint,47,opt,name=install_town,json=installTown,proto3,oneof" json:"install_town,omitempty"`
	PermanentWatts         *uint32                `protobuf:"varint,48,opt,name=permanent_watts,json=permanentWatts,proto3,oneof" json:"permanent_watts,omitempty"`
	DynamicWatts           *uint32                `protobuf:"varint,49,opt,name=dynamic_watts,json=dynamicWatts,proto3,oneof" json:"dynamic_watts,omitempty"`
	SupplyPriority         *uint32                `protobuf:"varint,50,opt,name=supply_priority,json=supplyPriority,proto3,oneof" json:"supply_priority,omitempty"`
	LowerLimit             *uint32                `protobuf:"varint,51,opt,name=lower_limit,json=lowerLimit,proto3,oneof" json:"lower_limit,omitempty"`
	UpperLimit             *uint32                `protobuf:"varint,52,opt,name=upper_limit,json=upperLimit,proto3,oneof" json:"upper_limit,omitempty"`
	InvOnOff               *uint32                `protobuf:"varint,53,opt,name=inv_on_off,json=invOnOff,proto3,oneof" json:"inv_on_off,omitempty"`
	WirelessErrorCode      *uint32                `protobuf:"varint,54,opt,name=wireless_error_code,json=wirelessErrorCode,proto3,oneof" json:"wireless_error_code,omitempty"`
	WirelessWarningCode    *uint32                `protobuf:"varint,55,opt,name=wireless_warning_code,json=wirelessWarningCode,proto3,oneof" json:"wireless_warning_code,omitempty"`
	InvBrightness          *uint32                `protobuf:"varint,56,opt,name=inv_brightness,json=invBrightness,proto3,oneof" json:"inv_brightness,omitempty"`
	HeartbeatFrequency     *uint32                `protobuf:"varint,57,opt,name=heartbeat_frequency,json=heartbeatFrequency,proto3,oneof" json:"heartbeat_frequency,omitempty"`
	RatedPower             *uint32                `protobuf:"varint,58,opt,name=rated_power,json=ratedPower,proto3,oneof" json:"rated_power,omitempty"`
	BatteryChargeRemain    *uint32                `protobuf:"varint,59,opt,name=battery_charge_remain,json=batteryChargeRemain,proto3,oneof" json:"battery_charge_remain,omitempty"`
	BatteryDischargeRemain *uint32                `protobuf:"varint,60,opt,name=battery_discharge_remain,json=batteryDischargeRemain,proto3,oneof" json:"battery_discharge_remain,omitempty"`
	Unknown1               *uint32                `protobuf:"varint,62,opt,name=unknown1,proto3,oneof" json:"unknown1,omitempty"`
	Unknown2               *uint32                `protobuf:"varint,63,opt,name=unknown2,proto3,oneof" json:"unknown2,omitempty"`
	Unknown3               *uint32                `protobuf:"varint,64,opt,name=unknown3,proto3,oneof" json:"unknown3,omitempty"`
	Unknown4               *uint32                `protobuf:"varint,65,opt,name=unknown4,proto3,oneof" json:"unknown4,omitempty"`
	Unknown5               *uint32                `protobuf:"varint,66,opt,name=unknown5,proto3,oneof" json:"unknown5,omitempty"`
	Unknown6               *uint32                `protobuf:"varint,67,opt,name=unknown6,proto3,oneof" json:"unknown6,omitempty"`
	Unknown7               *uint32                `protobuf:"varint,68,opt,name=unknown7,proto3,oneof" json:"unknown7,omitempty"`
	Unknown8               *uint32                `protobuf:"varint,82,opt,name=unknown8,proto3,oneof" json:"unknown8,omitempty"`
	Unknown8A              *uint32                `protobuf:"varint,98,opt,name=unknown8a,proto3,oneof" json:"unknown8a,omitempty"`
	Unknown8B              *uint32                `protobuf:"varint,109,opt,name=unknown8b,proto3,oneof" json:"unknown8b,omitempty"`
	Unknown9               *uint32                `protobuf:"varint,124,opt,name=unknown9,proto3,oneof" json:"unknown9,omitempty"`
	Unknown10              *uint32                `protobuf:"varint,125,opt,name=unknown10,proto3,oneof" json:"unknown10,omitempty"`
	Unknown11              *uint32                `protobuf:"varint,134,opt,name=unknown11,proto3,oneof" json:"unknown11,omitempty"`
	Timestamp              *uint32                `protobuf:"varint,153,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	Unknown12              *uint32                `protobuf:"varint,154,opt,name=unknown12,proto3,oneof" json:"unknown12,omitempty"`
	Unknown13              *uint32                `protobuf:"varint,155,opt,name=unknown13,proto3,oneof" json:"unknown13,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *InverterHeartbeat) Reset() {
	*x = InverterHeartbeat{}
	mi := &file_powerstream_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InverterHeartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InverterHeartbeat) ProtoMessage() {}

func (x *InverterHeartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_powerstream_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InverterHeartbeat.ProtoReflect.Descriptor instead.
func (*InverterHeartbeat) Descriptor() ([]byte, []int) {
	return file_powerstream_proto_rawDescGZIP(), []int{0}
}

func (x *InverterHeartbeat) GetInvErrorCode() uint32 {
	if x != nil && x.InvErrorCode != nil {
		return *x.InvErrorCode
	}
	return 0
}

func (x *InverterHeartbeat) GetInvWarningCode() uint32 {
	if x != nil && x.InvWarningCode != nil {
		return *x.InvWarningCode
	}
	return 0
}

func (x *InverterHeartbeat) GetPv1ErrorCode() uint32 {
	if x != nil && x.Pv1ErrorCode != nil {
		return *x.Pv1ErrorCode
	}
	return 0
}

func (x *InverterHeartbeat) GetPv1WarningCode() uint32 {
	if x != nil && x.Pv1WarningCode != nil {
		return *x.Pv1WarningCode
	}
	return 0
}

func (x *InverterHeartbeat) GetPv2ErrorCode() uint32 {
	if x != nil && x.Pv2ErrorCode != nil {
		return *x.Pv2ErrorCode
	}
	return 0
}

func (x *InverterHeartbeat) GetPv2WarningCode() uint32 {
	if x != nil && x.Pv2WarningCode != nil {
		return *x.Pv2WarningCode
	}
	return 0
}

func (x *InverterHeartbeat) GetBatErrorCode() uint32 {
	if x != nil && x.BatErrorCode != nil {
		return *x.BatErrorCode
	}
	return 0
}

func (x *InverterHeartbeat) GetBatWarningCode() uint32 {
	if x != nil && x.BatWarningCode != nil {
		return *x.BatWarningCode
	}
	return 0
}

func (x *InverterHeartbeat) GetLlcErrorCode() uint32 {
	if x != nil && x.LlcErrorCode != nil {
		return *x.LlcErrorCode
	}
	return 0
}

func (x *InverterHeartbeat) GetLlcWarningCode() uint32 {
	if x != nil && x.LlcWarningCode != nil {
		return *x.LlcWarningCode
	}
	return 0
}

func (x *InverterHeartbeat) GetPv1Status() uint32 {
	if x != nil && x.Pv1Status != nil {
		return *x.Pv1Status
	}
	return 0
}

func (x *InverterHeartbeat) GetPv2Status() uint32 {
	if x != nil && x.Pv2Status != nil {
		return *x.Pv2Status
	}
	return 0
}

func (x *InverterHeartbeat) GetBatStatus() uint32 {
	if x != nil && x.BatStatus != nil {
		return *x.BatStatus
	}
	return 0
}

func (x *InverterHeartbeat) GetLlcStatus() uint32 {
	if x != nil && x.LlcStatus != nil {
		return *x.LlcStatus
	}
	return 0
}

func (x *InverterHeartbeat) GetInvStatus() uint32 {
	if x != nil && x.InvStatus != nil {
		return *x.InvStatus
	}
	return 0
}

func (x *InverterHeartbeat) GetPv1InputVolt() int32 {
	if x != nil && x.Pv1InputVolt != nil {
		return *x.Pv1InputVolt
	}
	return 0
}

func (x *InverterHeartbeat) GetPv1OpVolt() int32 {
	if x != nil && x.Pv1OpVolt != nil {
		return *x.Pv1OpVolt
	}
	return 0
}

func (x *InverterHeartbeat) GetPv1InputCur() int32 {
	if x != nil && x.Pv1InputCur != nil {
		return *x.Pv1InputCur
	}
	return 0
}

func (x *InverterHeartbeat) GetPv1InputWatts() int32 {
	if x != nil && x.Pv1InputWatts != nil {
		return *x.Pv1InputWatts
	}
	return 0
}

func (x *InverterHeartbeat) GetPv1Temp() int32 {
	if x != nil && x.Pv1Temp != nil {
		return *x.Pv1Temp
	}
	return 0
}

func (x *InverterHeartbeat) GetPv2InputVolt() int32 {
	if x != nil && x.Pv2InputVolt != nil {
		return *x.Pv2InputVolt
	}
	return 0
}

func (x *InverterHeartbeat) GetPv2OpVolt() int32 {
	if x != nil && x.Pv2OpVolt != nil {
		return *x.Pv2OpVolt
	}
	return 0
}

func (x *InverterHeartbeat) GetPv2InputCur() int32 {
	if x != nil && x.Pv2InputCur != nil {
		return *x.Pv2InputCur
	}
	return 0
}

func (x *InverterHeartbeat) GetPv2InputWatts() int32 {
	if x != nil && x.Pv2InputWatts != nil {
		return *x.Pv2InputWatts
	}
	return 0
}

func (x *InverterHeartbeat) GetPv2Temp() int32 {
	if x != nil && x.Pv2Temp != nil {
		return *x.Pv2Temp
	}
	return 0
}

func (x *InverterHeartbeat) GetBatInputVolt() int32 {
	if x != nil && x.BatInputVolt != nil {
		return *x.BatInputVolt
	}
	return 0
}

func (x *InverterHeartbeat) GetBatOpVolt() int32 {
	if x != nil && x.BatOpVolt != nil {
		return *x.BatOpVolt
	}
	return 0
}

func (x *InverterHeartbeat) GetBatInputCur() int32 {
	if x != nil && x.BatInputCur != nil {
		return *x.BatInputCur
	}
	return 0
}

func (x *InverterHeartbeat) GetBatInputWatts() int32 {
	if x != nil && x.BatInputWatts != nil {
		return *x.BatInputWatts
	}
	return 0
}

func (x *InverterHeartbeat) GetBatTemp() int32 {
	if x != nil && x.BatTemp != nil {
		return *x.BatTemp
	}
	return 0
}

func (x *InverterHeartbeat) GetBatSoc() uint32 {
	if x != nil && x.BatSoc != nil {
		return *x.BatSoc
	}
	return 0
}

func (x *InverterHeartbeat) GetLlcInputVolt() int32 {
	if x != nil && x.LlcInputVolt != nil {
		return *x.LlcInputVolt
	}
	return 0
}

func (x *InverterHeartbeat) GetLlcOpVolt() int32 {
	if x != nil && x.LlcOpVolt != nil {
		return *x.LlcOpVolt
	}
	return 0
}

func (x *InverterHeartbeat) GetLlcTemp() int32 {
	if x != nil && x.LlcTemp != nil {
		return *x.LlcTemp
	}
	return 0
}

func (x *InverterHeartbeat) GetInvInputVolt() int32 {
	if x != nil && x.InvInputVolt != nil {
		return *x.InvInputVolt
	}
	return 0
}

func (x *InverterHeartbeat) GetInvOpVolt() int32 {
	if x != nil && x.InvOpVolt != nil {
		return *x.InvOpVolt
	}
	return 0
}

func (x *InverterHeartbeat) GetInvOutputCur() int32 {
	if x != nil && x.InvOutputCur != nil {
		return *x.InvOutputCur
	}
	return 0
}

func (x *InverterHeartbeat) GetInvOutputWatts() int32 {
	if x != nil && x.InvOutputWatts != nil {
		return *x.InvOutputWatts
	}
	return 0
}

func (x *InverterHeartbeat) GetInvTemp() int32 {
	if x != nil && x.InvTemp != nil {
		return *x.InvTemp
	}
	return 0
}

func (x *InverterHeartbeat) GetInvFreq() int32 {
	if x != nil && x.InvFreq != nil {
		return *x.InvFreq
	}
	return 0
}

func (x *InverterHeartbeat) GetInvDcCur() int32 {
	if x != nil && x.InvDcCur != nil {
		return *x.InvDcCur
	}
	return 0
}

func (x *InverterHeartbeat) GetBpType() int32 {
	if x != nil && x.BpType != nil {
		return *x.BpType
	}
	return 0
}

func (x *InverterHeartbeat) GetInvRelayStatus() int32 {
	if x != nil && x.InvRelayStatus != nil {
		return *x.InvRelayStatus
	}
	return 0
}

func (x *InverterHeartbeat) GetPv1RelayStatus() int32 {
	if x != nil && x.Pv1RelayStatus != nil {
		return *x.Pv1RelayStatus
	}
	return 0
}

func (x *InverterHeartbeat) GetPv2RelayStatus() int32 {
	if x != nil && x.Pv2RelayStatus != nil {
		return *x.Pv2RelayStatus
	}
	return 0
}

func (x *InverterHeartbeat) GetInstallCountry() uint32 {
	if x != nil && x.InstallCountry != nil {
		return *x.InstallCountry
	}
	return 0
}

func (x *InverterHeartbeat) GetInstallTown() uint32 {
	if x != nil && x.InstallTown != nil {
		return *x.InstallTown
	}
	return 0
}

func (x *InverterHeartbeat) GetPermanentWatts() uint32 {
	if x != nil && x.PermanentWatts != nil {
		return *x.PermanentWatts
	}
	return 0
}

func (x *InverterHeartbeat) GetDynamicWatts() uint32 {
	if x != nil && x.DynamicWatts != nil {
		return *x.DynamicWatts
	}
	return 0
}

func (x *InverterHeartbeat) GetSupplyPriority() uint32 {
	if x != nil && x.SupplyPriority != nil {
		return *x.SupplyPriority
	}
	return 0
}

func (x *InverterHeartbeat) GetLowerLimit() uint32 {
	if x != nil && x.LowerLimit != nil {
		return *x.LowerLimit
	}
	return 0
}

func (x *InverterHeartbeat) GetUpperLimit() uint32 {
	if x != nil && x.UpperLimit != nil {
		return *x.UpperLimit
	}
	return 0
}

func (x *InverterHeartbeat) GetInvOnOff() uint32 {
	if x != nil && x.InvOnOff != nil {
		return *x.InvOnOff
	}
	return 0
}

func (x *InverterHeartbeat) GetWirelessErrorCode() uint32 {
	if x != nil && x.WirelessErrorCode != nil {
		return *x.WirelessErrorCode
	}
	return 0
}

func (x *InverterHeartbeat) GetWirelessWarningCode() uint32 {
	if x != nil && x.WirelessWarningCode != nil {
		return *x.WirelessWarningCode
	}
	return 0
}

func (x *InverterHeartbeat) GetInvBrightness() uint32 {
	if x != nil && x.InvBrightness != nil {
		return *x.InvBrightness
	}
	return 0
}

func (x *InverterHeartbeat) GetHeartbeatFrequency() uint32 {
	if x != nil && x.HeartbeatFrequency != nil {
		return *x.HeartbeatFrequency
	}
	return 0
}

func (x *InverterHeartbeat) GetRatedPower() uint32 {
	if x != nil && x.RatedPower != nil {
		return *x.RatedPower
	}
	return 0
}

func (x *InverterHeartbeat) GetBatteryChargeRemain() uint32 {
	if x != nil && x.BatteryChargeRemain != nil {
		return *x.BatteryChargeRemain
	}
	return 0
}

func (x *InverterHeartbeat) GetBatteryDischargeRemain() uint32 {
	if x != nil && x.BatteryDischargeRemain != nil {
		return *x.BatteryDischargeRemain
	}
	return 0
}

func (x *InverterHeartbeat) GetUnknown1() uint32 {
	if x != nil && x.Unknown1 != nil {
		return *x.Unknown1
	}
	return 0
}

func (x *InverterHeartbeat) GetUnknown2() uint32 {
	if x != nil && x.Unknown2 != nil {
		return *x.Unknown2
	}
	return 0
}

func (x *InverterHeartbeat) GetUnknown3() uint32 {
	if x != nil && x.Unknown3 != nil {
		return *x.Unknown3
	}
	return 0
}

func (x *InverterHeartbeat) GetUnknown4() uint32 {
	if x != nil && x.Unknown4 != nil {
		return *x.Unknown4
	}
	return 0
}

func (x *InverterHeartbeat) GetUnknown5() uint32 {
	if x != nil && x.Unknown5 != nil {
		return *x.Unknown5
	}
	return 0
}

func (x *InverterHeartbeat) GetUnknown6() uint32 {
	if x != nil && x.Unknown6 != nil {
		return *x.Unknown6
	}
	return 0
}

func (x *InverterHeartbeat) GetUnknown7() uint32 {
	if x != nil && x.Unknown7 != nil {
		return *x.Unknown7
	}
	return 0
}

func (x *InverterHeartbeat) GetUnknown8() uint32 {
	if x != nil && x.Unknown8 != nil {
		return *x.Unknown8
	}
	return 0
}

func (x *InverterHeartbeat) GetUnknown8A() uint32 {
	if x != nil && x.Unknown8A != nil {
		return *x.Unknown8A
	}
	return 0
}

func (x *InverterHeartbeat) GetUnknown8B() uint32 {
	if x != nil && x.Unknown8B != nil {
		return *x.Unknown8B
	}
	return 0
}

func (x *InverterHeartbeat) GetUnknown9() uint32 {
	if x != nil && x.Unknown9 != nil {
		return *x.Unknown9
	}
	return 0
}

func (x *InverterHeartbeat) GetUnknown10() uint32 {
	if x != nil && x.Unknown10 != nil {
		return *x.Unknown10
	}
	return 0
}

func (x *InverterHeartbeat) GetUnknown11() uint32 {
	if x != nil && x.Unknown11 != nil {
		return *x.Unknown11
	}
	return 0
}

func (x *InverterHeartbeat) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *InverterHeartbeat) GetUnknown12() uint32 {
	if x != nil && x.Unknown12 != nil {
		return *x.Unknown12
	}
	return 0
}

func (x *InverterHeartbeat) GetUnknown13() uint32 {
	if x != nil && x.Unknown13 != nil {
		return *x.Unknown13
	}
	return 0
}

type PermanentWattsPack struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PermanentWatts *uint32                `protobuf:"varint,1,opt,name=permanent_watts,json=permanentWatts,proto3,oneof" json:"permanent_watts,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PermanentWattsPack) Reset() {
	*x = PermanentWattsPack{}
	mi := &file_powerstream_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PermanentWattsPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermanentWattsPack) ProtoMessage() {}

func (x *PermanentWattsPack) ProtoReflect() protoreflect.Message {
	mi := &file_powerstream_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermanentWattsPack.ProtoReflect.Descriptor instead.
func (*PermanentWattsPack) Descriptor() ([]byte, []int) {
	return file_powerstream_proto_rawDescGZIP(), []int{1}
}

func (x *PermanentWattsPack) GetPermanentWatts() uint32 {
	if x != nil && x.PermanentWatts != nil {
		return *x.PermanentWatts
	}
	return 0
}

type SupplyPriorityPack struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SupplyPriority *uint32                `protobuf:"varint,1,opt,name=supply_priority,json=supplyPriority,proto3,oneof" json:"supply_priority,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SupplyPriorityPack) Reset() {
	*x = SupplyPriorityPack{}
	mi := &file_powerstream_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SupplyPriorityPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplyPriorityPack) ProtoMessage() {}

func (x *SupplyPriorityPack) ProtoReflect() protoreflect.Message {
	mi := &file_powerstream_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplyPriorityPack.ProtoReflect.Descriptor instead.
func (*SupplyPriorityPack) Descriptor() ([]byte, []int) {
	return file_powerstream_proto_rawDescGZIP(), []int{2}
}

func (x *SupplyPriorityPack) GetSupplyPriority() uint32 {
	if x != nil && x.SupplyPriority != nil {
		return *x.SupplyPriority
	}
	return 0
}

type BatLowerPack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LowerLimit    *int32                 `protobuf:"varint,1,opt,name=lower_limit,json=lowerLimit,proto3,oneof" json:"lower_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatLowerPack) Reset() {
	*x = BatLowerPack{}
	mi := &file_powerstream_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatLowerPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatLowerPack) ProtoMessage() {}

func (x *BatLowerPack) ProtoReflect() protoreflect.Message {
	mi := &file_powerstream_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatLowerPack.ProtoReflect.Descriptor instead.
func (*BatLowerPack) Descriptor() ([]byte, []int) {
	return file_powerstream_proto_rawDescGZIP(), []int{3}
}

func (x *BatLowerPack) GetLowerLimit() int32 {
	if x != nil && x.LowerLimit != nil {
		return *x.LowerLimit
	}
	return 0
}

type BatUpperPack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UpperLimit    *int32                 `protobuf:"varint,1,opt,name=upper_limit,json=upperLimit,proto3,oneof" json:"upper_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatUpperPack) Reset() {
	*x = BatUpperPack{}
	mi := &file_powerstream_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatUpperPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatUpperPack) ProtoMessage() {}

func (x *BatUpperPack) ProtoReflect() protoreflect.Message {
	mi := &file_powerstream_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatUpperPack.ProtoReflect.Descriptor instead.
func (*BatUpperPack) Descriptor() ([]byte, []int) {
	return file_powerstream_proto_rawDescGZIP(), []int{4}
}

func (x *BatUpperPack) GetUpperLimit() int32 {
	if x != nil && x.UpperLimit != nil {
		return *x.UpperLimit
	}
	return 0
}

type BrightnessPack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Brightness    *int32                 `protobuf:"varint,1,opt,name=brightness,proto3,oneof" json:"brightness,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BrightnessPack) Reset() {
	*x = BrightnessPack{}
	mi := &file_powerstream_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BrightnessPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrightnessPack) ProtoMessage() {}

func (x *BrightnessPack) ProtoReflect() protoreflect.Message {
	mi := &file_powerstream_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrightnessPack.ProtoReflect.Descriptor instead.
func (*BrightnessPack) Descriptor() ([]byte, []int) {
	return file_powerstream_proto_rawDescGZIP(), []int{5}
}

func (x *BrightnessPack) GetBrightness() int32 {
	if x != nil && x.Brightness != nil {
		return *x.Brightness
	}
	return 0
}

type PowerItem struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Timestamp      *uint32                `protobuf:"varint,1,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	Timezone       *int32                 `protobuf:"zigzag32,2,opt,name=timezone,proto3,oneof" json:"timezone,omitempty"`
	InvToGridPower *uint32                `protobuf:"varint,3,opt,name=inv_to_grid_power,json=invToGridPower,proto3,oneof" json:"inv_to_grid_power,omitempty"`
	InvToPlugPower *uint32                `protobuf:"varint,4,opt,name=inv_to_plug_power,json=invToPlugPower,proto3,oneof" json:"inv_to_plug_power,omitempty"`
	BatteryPower   *int32                 `protobuf:"varint,5,opt,name=battery_power,json=batteryPower,proto3,oneof" json:"battery_power,omitempty"`
	Pv1OutputPower *uint32                `protobuf:"varint,6,opt,name=pv1_output_power,json=pv1OutputPower,proto3,oneof" json:"pv1_output_power,omitempty"`
	Pv2OutputPower *uint32                `protobuf:"varint,7,opt,name=pv2_output_power,json=pv2OutputPower,proto3,oneof" json:"pv2_output_power,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PowerItem) Reset() {
	*x = PowerItem{}
	mi := &file_powerstream_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PowerItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerItem) ProtoMessage() {}

func (x *PowerItem) ProtoReflect() protoreflect.Message {
	mi := &file_powerstream_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerItem.ProtoReflect.Descriptor instead.
func (*PowerItem) Descriptor() ([]byte, []int) {
	return file_powerstream_proto_rawDescGZIP(), []int{6}
}

func (x *PowerItem) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *PowerItem) GetTimezone() int32 {
	if x != nil && x.Timezone != nil {
		return *x.Timezone
	}
	return 0
}

func (x *PowerItem) GetInvToGridPower() uint32 {
	if x != nil && x.InvToGridPower != nil {
		return *x.InvToGridPower
	}
	return 0
}

func (x *PowerItem) GetInvToPlugPower() uint32 {
	if x != nil && x.InvToPlugPower != nil {
		return *x.InvToPlugPower
	}
	return 0
}

func (x *PowerItem) GetBatteryPower() int32 {
	if x != nil && x.BatteryPower != nil {
		return *x.BatteryPower
	}
	return 0
}

func (x *PowerItem) GetPv1OutputPower() uint32 {
	if x != nil && x.Pv1OutputPower != nil {
		return *x.Pv1OutputPower
	}
	return 0
}

func (x *PowerItem) GetPv2OutputPower() uint32 {
	if x != nil && x.Pv2OutputPower != nil {
		return *x.Pv2OutputPower
	}
	return 0
}

type PowerPack struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SysSeq         *uint32                `protobuf:"varint,1,opt,name=sys_seq,json=sysSeq,proto3,oneof" json:"sys_seq,omitempty"`
	SysPowerStream []*PowerItem           `protobuf:"bytes,2,rep,name=sys_power_stream,json=sysPowerStream,proto3" json:"sys_power_stream,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PowerPack) Reset() {
	*x = PowerPack{}
	mi := &file_powerstream_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PowerPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerPack) ProtoMessage() {}

func (x *PowerPack) ProtoReflect() protoreflect.Message {
	mi := &file_powerstream_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerPack.ProtoReflect.Descriptor instead.
func (*PowerPack) Descriptor() ([]byte, []int) {
	return file_powerstream_proto_rawDescGZIP(), []int{7}
}

func (x *PowerPack) GetSysSeq() uint32 {
	if x != nil && x.SysSeq != nil {
		return *x.SysSeq
	}
	return 0
}

func (x *PowerPack) GetSysPowerStream() []*PowerItem {
	if x != nil {
		return x.SysPowerStream
	}
	return nil
}

type PowerAckPack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SysSeq        *uint32                `protobuf:"varint,1,opt,name=sys_seq,json=sysSeq,proto3,oneof" json:"sys_seq,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PowerAckPack) Reset() {
	*x = PowerAckPack{}
	mi := &file_powerstream_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PowerAckPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerAckPack) ProtoMessage() {}

func (x *PowerAckPack) ProtoReflect() protoreflect.Message {
	mi := &file_powerstream_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerAckPack.ProtoReflect.Descriptor instead.
func (*PowerAckPack) Descriptor() ([]byte, []int) {
	return file_powerstream_proto_rawDescGZIP(), []int{8}
}

func (x *PowerAckPack) GetSysSeq() uint32 {
	if x != nil && x.SysSeq != nil {
		return *x.SysSeq
	}
	return 0
}

type NodeMassage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sn            *string                `protobuf:"bytes,1,opt,name=sn,proto3,oneof" json:"sn,omitempty"`
	Mac           []byte                 `protobuf:"bytes,2,opt,name=mac,proto3,oneof" json:"mac,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeMassage) Reset() {
	*x = NodeMassage{}
	mi := &file_powerstream_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeMassage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeMassage) ProtoMessage() {}

func (x *NodeMassage) ProtoReflect() protoreflect.Message {
	mi := &file_powerstream_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeMassage.ProtoReflect.Descriptor instead.
func (*NodeMassage) Descriptor() ([]byte, []int) {
	return file_powerstream_proto_rawDescGZIP(), []int{9}
}

func (x *NodeMassage) GetSn() string {
	if x != nil && x.Sn != nil {
		return *x.Sn
	}
	return ""
}

func (x *NodeMassage) GetMac() []byte {
	if x != nil {
		return x.Mac
	}
	return nil
}

type MeshChildNodeInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TopologyType    *uint32                `protobuf:"varint,1,opt,name=topology_type,json=topologyType,proto3,oneof" json:"topology_type,omitempty"`
	MeshProtocol    *uint32                `protobuf:"varint,2,opt,name=mesh_protocol,json=meshProtocol,proto3,oneof" json:"mesh_protocol,omitempty"`
	MaxSubDeviceNum *uint32                `protobuf:"varint,3,opt,name=max_sub_device_num,json=maxSubDeviceNum,proto3,oneof" json:"max_sub_device_num,omitempty"`
	ParentMacId     []byte                 `protobuf:"bytes,4,opt,name=parent_mac_id,json=parentMacId,proto3,oneof" json:"parent_mac_id,omitempty"`
	MeshId          []byte                 `protobuf:"bytes,5,opt,name=mesh_id,json=meshId,proto3,oneof" json:"mesh_id,omitempty"`
	SubDeviceList   []*NodeMassage         `protobuf:"bytes,6,rep,name=sub_device_list,json=subDeviceList,proto3" json:"sub_device_list,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MeshChildNodeInfo) Reset() {
	*x = MeshChildNodeInfo{}
	mi := &file_powerstream_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeshChildNodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshChildNodeInfo) ProtoMessage() {}

func (x *MeshChildNodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_powerstream_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshChildNodeInfo.ProtoReflect.Descriptor instead.
func (*MeshChildNodeInfo) Descriptor() ([]byte, []int) {
	return file_powerstream_proto_rawDescGZIP(), []int{10}
}

func (x *MeshChildNodeInfo) GetTopologyType() uint32 {
	if x != nil && x.TopologyType != nil {
		return *x.TopologyType
	}
	return 0
}

func (x *MeshChildNodeInfo) GetMeshProtocol() uint32 {
	if x != nil && x.MeshProtocol != nil {
		return *x.MeshProtocol
	}
	return 0
}

func (x *MeshChildNodeInfo) GetMaxSubDeviceNum() uint32 {
	if x != nil && x.MaxSubDeviceNum != nil {
		return *x.MaxSubDeviceNum
	}
	return 0
}

func (x *MeshChildNodeInfo) GetParentMacId() []byte {
	if x != nil {
		return x.ParentMacId
	}
	return nil
}

func (x *MeshChildNodeInfo) GetMeshId() []byte {
	if x != nil {
		return x.MeshId
	}
	return nil
}

func (x *MeshChildNodeInfo) GetSubDeviceList() []*NodeMassage {
	if x != nil {
		return x.SubDeviceList
	}
	return nil
}

var File_powerstream_proto protoreflect.FileDescriptor

const file_powerstream_proto_rawDesc = "" +
	"\n" +
	"\x11powerstream.proto\"\x95\"\n" +
	"\x11InverterHeartbeat\x12)\n" +
	"\x0einv_error_code\x18\x01 \x01(\rH\x00R\finvErrorCode\x88\x01\x01\x12-\n" +
	"\x10inv_warning_code\x18\x03 \x01(\rH\x01R\x0einvWarningCode\x88\x01\x01\x12)\n" +
	"\x0epv1_error_code\x18\x02 \x01(\rH\x02R\fpv1ErrorCode\x88\x01\x01\x12-\n" +
	"\x10pv1_warning_code\x18\x04 \x01(\rH\x03R\x0epv1WarningCode\x88\x01\x01\x12)\n" +
	"\x0epv2_error_code\x18\x05 \x01(\rH\x04R\fpv2ErrorCode\x88\x01\x01\x12-\n" +
	"\x10pv2_warning_code\x18\x06 \x01(\rH\x05R\x0epv2WarningCode\x88\x01\x01\x12)\n" +
	"\x0ebat_error_code\x18\a \x01(\rH\x06R\fbatErrorCode\x88\x01\x01\x12-\n" +
	"\x10bat_warning_code\x18\b \x01(\rH\aR\x0ebatWarningCode\x88\x01\x01\x12)\n" +
	"\x0ellc_error_code\x18\t \x01(\rH\bR\fllcErrorCode\x88\x01\x01\x12-\n" +
	"\x10llc_warning_code\x18\n" +
	" \x01(\rH\tR\x0ellcWarningCode\x88\x01\x01\x12\"\n" +
	"\n" +
	"pv1_status\x18\v \x01(\rH\n" +
	"R\tpv1Status\x88\x01\x01\x12\"\n" +
	"\n" +
	"pv2_status\x18\f \x01(\rH\vR\tpv2Status\x88\x01\x01\x12\"\n" +
	"\n" +
	"bat_status\x18\r \x01(\rH\fR\tbatStatus\x88\x01\x01\x12\"\n" +
	"\n" +
	"llc_status\x18\x0e \x01(\rH\rR\tllcStatus\x88\x01\x01\x12\"\n" +
	"\n" +
	"inv_status\x18\x0f \x01(\rH\x0eR\tinvStatus\x88\x01\x01\x12)\n" +
	"\x0epv1_input_volt\x18\x10 \x01(\x05H\x0fR\fpv1InputVolt\x88\x01\x01\x12#\n" +
	"\vpv1_op_volt\x18\x11 \x01(\x05H\x10R\tpv1OpVolt\x88\x01\x01\x12'\n" +
	"\rpv1_input_cur\x18\x12 \x01(\x05H\x11R\vpv1InputCur\x88\x01\x01\x12+\n" +
	"\x0fpv1_input_watts\x18\x13 \x01(\x05H\x12R\rpv1InputWatts\x88\x01\x01\x12\x1e\n" +
	"\bpv1_temp\x18\x14 \x01(\x05H\x13R\apv1Temp\x88\x01\x01\x12)\n" +
	"\x0epv2_input_volt\x18\x15 \x01(\x05H\x14R\fpv2InputVolt\x88\x01\x01\x12#\n" +
	"\vpv2_op_volt\x18\x16 \x01(\x05H\x15R\tpv2OpVolt\x88\x01\x01\x12'\n" +
	"\rpv2_input_cur\x18\x17 \x01(\x05H\x16R\vpv2InputCur\x88\x01\x01\x12+\n" +
	"\x0fpv2_input_watts\x18\x18 \x01(\x05H\x17R\rpv2InputWatts\x88\x01\x01\x12\x1e\n" +
	"\bpv2_temp\x18\x19 \x01(\x05H\x18R\apv2Temp\x88\x01\x01\x12)\n" +
	"\x0ebat_input_volt\x18\x1a \x01(\x05H\x19R\fbatInputVolt\x88\x01\x01\x12#\n" +
	"\vbat_op_volt\x18\x1b \x01(\x05H\x1aR\tbatOpVolt\x88\x01\x01\x12'\n" +
	"\rbat_input_cur\x18\x1c \x01(\x05H\x1bR\vbatInputCur\x88\x01\x01\x12+\n" +
	"\x0fbat_input_watts\x18\x1d \x01(\x05H\x1cR\rbatInputWatts\x88\x01\x01\x12\x1e\n" +
	"\bbat_temp\x18\x1e \x01(\x05H\x1dR\abatTemp\x88\x01\x01\x12\x1c\n" +
	"\abat_soc\x18\x1f \x01(\rH\x1eR\x06batSoc\x88\x01\x01\x12)\n" +
	"\x0ellc_input_volt\x18  \x01(\x05H\x1fR\fllcInputVolt\x88\x01\x01\x12#\n" +
	"\vllc_op_volt\x18! \x01(\x05H R\tllcOpVolt\x88\x01\x01\x12\x1e\n" +
	"\bllc_temp\x18\" \x01(\x05H!R\allcTemp\x88\x01\x01\x12)\n" +
	"\x0einv_input_volt\x18# \x01(\x05H\"R\finvInputVolt\x88\x01\x01\x12#\n" +
	"\vinv_op_volt\x18$ \x01(\x05H#R\tinvOpVolt\x88\x01\x01\x12)\n" +
	"\x0einv_output_cur\x18% \x01(\x05H$R\finvOutputCur\x88\x01\x01\x12-\n" +
	"\x10inv_output_watts\x18& \x01(\x05H%R\x0einvOutputWatts\x88\x01\x01\x12\x1e\n" +
	"\binv_temp\x18' \x01(\x05H&R\ainvTemp\x88\x01\x01\x12\x1e\n" +
	"\binv_freq\x18( \x01(\x05H'R\ainvFreq\x88\x01\x01\x12!\n" +
	"\n" +
	"inv_dc_cur\x18) \x01(\x05H(R\binvDcCur\x88\x01\x01\x12\x1c\n" +
	"\abp_type\x18* \x01(\x05H)R\x06bpType\x88\x01\x01\x12-\n" +
	"\x10inv_relay_status\x18+ \x01(\x05H*R\x0einvRelayStatus\x88\x01\x01\x12-\n" +
	"\x10pv1_relay_status\x18, \x01(\x05H+R\x0epv1RelayStatus\x88\x01\x01\x12-\n" +
	"\x10pv2_relay_status\x18- \x01(\x05H,R\x0epv2RelayStatus\x88\x01\x01\x12,\n" +
	"\x0finstall_country\x18. \x01(\rH-R\x0einstallCountry\x88\x01\x01\x12&\n" +
	"\finstall_town\x18/ \x01(\rH.R\vinstallTown\x88\x01\x01\x12,\n" +
	"\x0fpermanent_watts\x180 \x01(\rH/R\x0epermanentWatts\x88\x01\x01\x12(\n" +
	"\rdynamic_watts\x181 \x01(\rH0R\fdynamicWatts\x88\x01\x01\x12,\n" +
	"\x0fsupply_priority\x182 \x01(\rH1R\x0esupplyPriority\x88\x01\x01\x12$\n" +
	"\vlower_limit\x183 \x01(\rH2R\n" +
	"lowerLimit\x88\x01\x01\x12$\n" +
	"\vupper_limit\x184 \x01(\rH3R\n" +
	"upperLimit\x88\x01\x01\x12!\n" +
	"\n" +
	"inv_on_off\x185 \x01(\rH4R\binvOnOff\x88\x01\x01\x123\n" +
	"\x13wireless_error_code\x186 \x01(\rH5R\x11wirelessErrorCode\x88\x01\x01\x127\n" +
	"\x15wireless_warning_code\x187 \x01(\rH6R\x13wirelessWarningCode\x88\x01\x01\x12*\n" +
	"\x0einv_brightness\x188 \x01(\rH7R\rinvBrightness\x88\x01\x01\x124\n" +
	"\x13heartbeat_frequency\x189 \x01(\rH8R\x12heartbeatFrequency\x88\x01\x01\x12$\n" +
	"\vrated_power\x18: \x01(\rH9R\n" +
	"ratedPower\x88\x01\x01\x127\n" +
	"\x15battery_charge_remain\x18; \x01(\rH:R\x13batteryChargeRemain\x88\x01\x01\x12=\n" +
	"\x18battery_discharge_remain\x18< \x01(\rH;R\x16batteryDischargeRemain\x88\x01\x01\x12\x1f\n" +
	"\bunknown1\x18> \x01(\rH<R\bunknown1\x88\x01\x01\x12\x1f\n" +
	"\bunknown2\x18? \x01(\rH=R\bunknown2\x88\x01\x01\x12\x1f\n" +
	"\bunknown3\x18@ \x01(\rH>R\bunknown3\x88\x01\x01\x12\x1f\n" +
	"\bunknown4\x18A \x01(\rH?R\bunknown4\x88\x01\x01\x12\x1f\n" +
	"\bunknown5\x18B \x01(\rH@R\bunknown5\x88\x01\x01\x12\x1f\n" +
	"\bunknown6\x18C \x01(\rHAR\bunknown6\x88\x01\x01\x12\x1f\n" +
	"\bunknown7\x18D \x01(\rHBR\bunknown7\x88\x01\x01\x12\x1f\n" +
	"\bunknown8\x18R \x01(\rHCR\bunknown8\x88\x01\x01\x12!\n" +
	"\tunknown8a\x18b \x01(\rHDR\tunknown8a\x88\x01\x01\x12!\n" +
	"\tunknown8b\x18m \x01(\rHER\tunknown8b\x88\x01\x01\x12\x1f\n" +
	"\bunknown9\x18| \x01(\rHFR\bunknown9\x88\x01\x01\x12!\n" +
	"\tunknown10\x18} \x01(\rHGR\tunknown10\x88\x01\x01\x12\"\n" +
	"\tunknown11\x18\x86\x01 \x01(\rHHR\tunknown11\x88\x01\x01\x12\"\n" +
	"\ttimestamp\x18\x99\x01 \x01(\rHIR\ttimestamp\x88\x01\x01\x12\"\n" +
	"\tunknown12\x18\x9a\x01 \x01(\rHJR\tunknown12\x88\x01\x01\x12\"\n" +
	"\tunknown13\x18\x9b\x01 \x01(\rHKR\tunknown13\x88\x01\x01B\x11\n" +
	"\x0f_inv_error_codeB\x13\n" +
	"\x11_inv_warning_codeB\x11\n" +
	"\x0f_pv1_error_codeB\x13\n" +
	"\x11_pv1_warning_codeB\x11\n" +
	"\x0f_pv2_error_codeB\x13\n" +
	"\x11_pv2_warning_codeB\x11\n" +
	"\x0f_bat_error_codeB\x13\n" +
	"\x11_bat_warning_codeB\x11\n" +
	"\x0f_llc_error_codeB\x13\n" +
	"\x11_llc_warning_codeB\r\n" +
	"\v_pv1_statusB\r\n" +
	"\v_pv2_statusB\r\n" +
	"\v_bat_statusB\r\n" +
	"\v_llc_statusB\r\n" +
	"\v_inv_statusB\x11\n" +
	"\x0f_pv1_input_voltB\x0e\n" +
	"\f_pv1_op_voltB\x10\n" +
	"\x0e_pv1_input_curB\x12\n" +
	"\x10_pv1_input_wattsB\v\n" +
	"\t_pv1_tempB\x11\n" +
	"\x0f_pv2_input_voltB\x0e\n" +
	"\f_pv2_op_voltB\x10\n" +
	"\x0e_pv2_input_curB\x12\n" +
	"\x10_pv2_input_wattsB\v\n" +
	"\t_pv2_tempB\x11\n" +
	"\x0f_bat_input_voltB\x0e\n" +
	"\f_bat_op_voltB\x10\n" +
	"\x0e_bat_input_curB\x12\n" +
	"\x10_bat_input_wattsB\v\n" +
	"\t_bat_tempB\n" +
	"\n" +
	"\b_bat_socB\x11\n" +
	"\x0f_llc_input_voltB\x0e\n" +
	"\f_llc_op_voltB\v\n" +
	"\t_llc_tempB\x11\n" +
	"\x0f_inv_input_voltB\x0e\n" +
	"\f_inv_op_voltB\x11\n" +
	"\x0f_inv_output_curB\x13\n" +
	"\x11_inv_output_wattsB\v\n" +
	"\t_inv_tempB\v\n" +
	"\t_inv_freqB\r\n" +
	"\v_inv_dc_curB\n" +
	"\n" +
	"\b_bp_typeB\x13\n" +
	"\x11_inv_relay_statusB\x13\n" +
	"\x11_pv1_relay_statusB\x13\n" +
	"\x11_pv2_relay_statusB\x12\n" +
	"\x10_install_countryB\x0f\n" +
	"\r_install_townB\x12\n" +
	"\x10_permanent_wattsB\x10\n" +
	"\x0e_dynamic_wattsB\x12\n" +
	"\x10_supply_priorityB\x0e\n" +
	"\f_lower_limitB\x0e\n" +
	"\f_upper_limitB\r\n" +
	"\v_inv_on_offB\x16\n" +
	"\x14_wireless_error_codeB\x18\n" +
	"\x16_wireless_warning_codeB\x11\n" +
	"\x0f_inv_brightnessB\x16\n" +
	"\x14_heartbeat_frequencyB\x0e\n" +
	"\f_rated_powerB\x18\n" +
	"\x16_battery_charge_remainB\x1b\n" +
	"\x19_battery_discharge_remainB\v\n" +
	"\t_unknown1B\v\n" +
	"\t_unknown2B\v\n" +
	"\t_unknown3B\v\n" +
	"\t_unknown4B\v\n" +
	"\t_unknown5B\v\n" +
	"\t_unknown6B\v\n" +
	"\t_unknown7B\v\n" +
	"\t_unknown8B\f\n" +
	"\n" +
	"_unknown8aB\f\n" +
	"\n" +
	"_unknown8bB\v\n" +
	"\t_unknown9B\f\n" +
	"\n" +
	"_unknown10B\f\n" +
	"\n" +
	"_unknown11B\f\n" +
	"\n" +
	"_timestampB\f\n" +
	"\n" +
	"_unknown12B\f\n" +
	"\n" +
	"_unknown13\"V\n" +
	"\x12PermanentWattsPack\x12,\n" +
	"\x0fpermanent_watts\x18\x01 \x01(\rH\x00R\x0epermanentWatts\x88\x01\x01B\x12\n" +
	"\x10_permanent_watts\"V\n" +
	"\x12SupplyPriorityPack\x12,\n" +
	"\x0fsupply_priority\x18\x01 \x01(\rH\x00R\x0esupplyPriority\x88\x01\x01B\x12\n" +
	"\x10_supply_priority\"D\n" +
	"\fBatLowerPack\x12$\n" +
	"\vlower_limit\x18\x01 \x01(\x05H\x00R\n" +
	"lowerLimit\x88\x01\x01B\x0e\n" +
	"\f_lower_limit\"D\n" +
	"\fBatUpperPack\x12$\n" +
	"\vupper_limit\x18\x01 \x01(\x05H\x00R\n" +
	"upperLimit\x88\x01\x01B\x0e\n" +
	"\f_upper_limit\"D\n" +
	"\x0eBrightnessPack\x12#\n" +
	"\n" +
	"brightness\x18\x01 \x01(\x05H\x00R\n" +
	"brightness\x88\x01\x01B\r\n" +
	"\v_brightness\"\xba\x03\n" +
	"\tPowerItem\x12!\n" +
	"\ttimestamp\x18\x01 \x01(\rH\x00R\ttimestamp\x88\x01\x01\x12\x1f\n" +
	"\btimezone\x18\x02 \x01(\x11H\x01R\btimezone\x88\x01\x01\x12.\n" +
	"\x11inv_to_grid_power\x18\x03 \x01(\rH\x02R\x0einvToGridPower\x88\x01\x01\x12.\n" +
	"\x11inv_to_plug_power\x18\x04 \x01(\rH\x03R\x0einvToPlugPower\x88\x01\x01\x12(\n" +
	"\rbattery_power\x18\x05 \x01(\x05H\x04R\fbatteryPower\x88\x01\x01\x12-\n" +
	"\x10pv1_output_power\x18\x06 \x01(\rH\x05R\x0epv1OutputPower\x88\x01\x01\x12-\n" +
	"\x10pv2_output_power\x18\a \x01(\rH\x06R\x0epv2OutputPower\x88\x01\x01B\f\n" +
	"\n" +
	"_timestampB\v\n" +
	"\t_timezoneB\x14\n" +
	"\x12_inv_to_grid_powerB\x14\n" +
	"\x12_inv_to_plug_powerB\x10\n" +
	"\x0e_battery_powerB\x13\n" +
	"\x11_pv1_output_powerB\x13\n" +
	"\x11_pv2_output_power\"k\n" +
	"\tPowerPack\x12\x1c\n" +
	"\asys_seq\x18\x01 \x01(\rH\x00R\x06sysSeq\x88\x01\x01\x124\n" +
	"\x10sys_power_stream\x18\x02 \x03(\v2\n" +
	".PowerItemR\x0esysPowerStreamB\n" +
	"\n" +
	"\b_sys_seq\"8\n" +
	"\fPowerAckPack\x12\x1c\n" +
	"\asys_seq\x18\x01 \x01(\rH\x00R\x06sysSeq\x88\x01\x01B\n" +
	"\n" +
	"\b_sys_seq\"H\n" +
	"\vNodeMassage\x12\x13\n" +
	"\x02sn\x18\x01 \x01(\tH\x00R\x02sn\x88\x01\x01\x12\x15\n" +
	"\x03mac\x18\x02 \x01(\fH\x01R\x03mac\x88\x01\x01B\x05\n" +
	"\x03_snB\x06\n" +
	"\x04_mac\"\xef\x02\n" +
	"\x11MeshChildNodeInfo\x12(\n" +
	"\rtopology_type\x18\x01 \x01(\rH\x00R\ftopologyType\x88\x01\x01\x12(\n" +
	"\rmesh_protocol\x18\x02 \x01(\rH\x01R\fmeshProtocol\x88\x01\x01\x120\n" +
	"\x12max_sub_device_num\x18\x03 \x01(\rH\x02R\x0fmaxSubDeviceNum\x88\x01\x01\x12'\n" +
	"\rparent_mac_id\x18\x04 \x01(\fH\x03R\vparentMacId\x88\x01\x01\x12\x1c\n" +
	"\amesh_id\x18\x05 \x01(\fH\x04R\x06meshId\x88\x01\x01\x124\n" +
	"\x0fsub_device_list\x18\x06 \x03(\v2\f.NodeMassageR\rsubDeviceListB\x10\n" +
	"\x0e_topology_typeB\x10\n" +
	"\x0e_mesh_protocolB\x15\n" +
	"\x13_max_sub_device_numB\x10\n" +
	"\x0e_parent_mac_idB\n" +
	"\n" +
	"\b_mesh_idb\x06proto3"

var (
	file_powerstream_proto_rawDescOnce sync.Once
	file_powerstream_proto_rawDescData []byte
)

func file_powerstream_proto_rawDescGZIP() []byte {
	file_powerstream_proto_rawDescOnce.Do(func() {
		file_powerstream_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_powerstream_proto_rawDesc), len(file_powerstream_proto_rawDesc)))
	})
	return file_powerstream_proto_rawDescData
}

var file_powerstream_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_powerstream_proto_goTypes = []any{
	(*InverterHeartbeat)(nil),  // 0: InverterHeartbeat
	(*PermanentWattsPack)(nil), // 1: PermanentWattsPack
	(*SupplyPriorityPack)(nil), // 2: SupplyPriorityPack
	(*BatLowerPack)(nil),       // 3: BatLowerPack
	(*BatUpperPack)(nil),       // 4: BatUpperPack
	(*BrightnessPack)(nil),     // 5: BrightnessPack
	(*PowerItem)(nil),          // 6: PowerItem
	(*PowerPack)(nil),          // 7: PowerPack
	(*PowerAckPack)(nil),       // 8: PowerAckPack
	(*NodeMassage)(nil),        // 9: NodeMassage
	(*MeshChildNodeInfo)(nil),  // 10: MeshChildNodeInfo
}
var file_powerstream_proto_depIdxs = []int32{
	6, // 0: PowerPack.sys_power_stream:type_name -> PowerItem
	9, // 1: MeshChildNodeInfo.sub_device_list:type_name -> NodeMassage
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_powerstream_proto_init() }
func file_powerstream_proto_init() {
	if File_powerstream_proto != nil {
		return
	}
	file_powerstream_proto_msgTypes[0].OneofWrappers = []any{}
	file_powerstream_proto_msgTypes[1].OneofWrappers = []any{}
	file_powerstream_proto_msgTypes[2].OneofWrappers = []any{}
	file_powerstream_proto_msgTypes[3].OneofWrappers = []any{}
	file_powerstream_proto_msgTypes[4].OneofWrappers = []any{}
	file_powerstream_proto_msgTypes[5].OneofWrappers = []any{}
	file_powerstream_proto_msgTypes[6].OneofWrappers = []any{}
	file_powerstream_proto_msgTypes[7].OneofWrappers = []any{}
	file_powerstream_proto_msgTypes[8].OneofWrappers = []any{}
	file_powerstream_proto_msgTypes[9].OneofWrappers = []any{}
	file_powerstream_proto_msgTypes[10].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_powerstream_proto_rawDesc), len(file_powerstream_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_powerstream_proto_goTypes,
		DependencyIndexes: file_powerstream_proto_depIdxs,
		MessageInfos:      file_powerstream_proto_msgTypes,
	}.Build()
	File_powerstream_proto = out.File
	file_powerstream_proto_goTypes = nil
	file_powerstream_proto_depIdxs = nil
}
