// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: ecopacket.proto

package ecoflow2db

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Header struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pdata         []byte                 `protobuf:"bytes,1,opt,name=pdata,proto3,oneof" json:"pdata,omitempty"`
	Src           *int32                 `protobuf:"varint,2,opt,name=src,proto3,oneof" json:"src,omitempty"`
	Dest          *int32                 `protobuf:"varint,3,opt,name=dest,proto3,oneof" json:"dest,omitempty"`
	DSrc          *int32                 `protobuf:"varint,4,opt,name=d_src,json=dSrc,proto3,oneof" json:"d_src,omitempty"`
	DDest         *int32                 `protobuf:"varint,5,opt,name=d_dest,json=dDest,proto3,oneof" json:"d_dest,omitempty"`
	EncType       *int32                 `protobuf:"varint,6,opt,name=enc_type,json=encType,proto3,oneof" json:"enc_type,omitempty"`
	CheckType     *int32                 `protobuf:"varint,7,opt,name=check_type,json=checkType,proto3,oneof" json:"check_type,omitempty"`
	CmdFunc       *int32                 `protobuf:"varint,8,opt,name=cmd_func,json=cmdFunc,proto3,oneof" json:"cmd_func,omitempty"`
	CmdId         *int32                 `protobuf:"varint,9,opt,name=cmd_id,json=cmdId,proto3,oneof" json:"cmd_id,omitempty"`
	DataLen       *int32                 `protobuf:"varint,10,opt,name=data_len,json=dataLen,proto3,oneof" json:"data_len,omitempty"`
	NeedAck       *int32                 `protobuf:"varint,11,opt,name=need_ack,json=needAck,proto3,oneof" json:"need_ack,omitempty"`
	IsAck         *int32                 `protobuf:"varint,12,opt,name=is_ack,json=isAck,proto3,oneof" json:"is_ack,omitempty"`
	Seq           *int32                 `protobuf:"varint,14,opt,name=seq,proto3,oneof" json:"seq,omitempty"`
	ProductId     *int32                 `protobuf:"varint,15,opt,name=product_id,json=productId,proto3,oneof" json:"product_id,omitempty"`
	Version       *int32                 `protobuf:"varint,16,opt,name=version,proto3,oneof" json:"version,omitempty"`
	PayloadVer    *int32                 `protobuf:"varint,17,opt,name=payload_ver,json=payloadVer,proto3,oneof" json:"payload_ver,omitempty"`
	TimeSnap      *int32                 `protobuf:"varint,18,opt,name=time_snap,json=timeSnap,proto3,oneof" json:"time_snap,omitempty"`
	IsRwCmd       *int32                 `protobuf:"varint,19,opt,name=is_rw_cmd,json=isRwCmd,proto3,oneof" json:"is_rw_cmd,omitempty"`
	IsQueue       *int32                 `protobuf:"varint,20,opt,name=is_queue,json=isQueue,proto3,oneof" json:"is_queue,omitempty"`
	AckType       *int32                 `protobuf:"varint,21,opt,name=ack_type,json=ackType,proto3,oneof" json:"ack_type,omitempty"`
	Code          *string                `protobuf:"bytes,22,opt,name=code,proto3,oneof" json:"code,omitempty"`
	From          *string                `protobuf:"bytes,23,opt,name=from,proto3,oneof" json:"from,omitempty"`
	ModuleSn      *string                `protobuf:"bytes,24,opt,name=module_sn,json=moduleSn,proto3,oneof" json:"module_sn,omitempty"`
	DeviceSn      *string                `protobuf:"bytes,25,opt,name=device_sn,json=deviceSn,proto3,oneof" json:"device_sn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Header) Reset() {
	*x = Header{}
	mi := &file_ecopacket_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_ecopacket_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_ecopacket_proto_rawDescGZIP(), []int{0}
}

func (x *Header) GetPdata() []byte {
	if x != nil {
		return x.Pdata
	}
	return nil
}

func (x *Header) GetSrc() int32 {
	if x != nil && x.Src != nil {
		return *x.Src
	}
	return 0
}

func (x *Header) GetDest() int32 {
	if x != nil && x.Dest != nil {
		return *x.Dest
	}
	return 0
}

func (x *Header) GetDSrc() int32 {
	if x != nil && x.DSrc != nil {
		return *x.DSrc
	}
	return 0
}

func (x *Header) GetDDest() int32 {
	if x != nil && x.DDest != nil {
		return *x.DDest
	}
	return 0
}

func (x *Header) GetEncType() int32 {
	if x != nil && x.EncType != nil {
		return *x.EncType
	}
	return 0
}

func (x *Header) GetCheckType() int32 {
	if x != nil && x.CheckType != nil {
		return *x.CheckType
	}
	return 0
}

func (x *Header) GetCmdFunc() int32 {
	if x != nil && x.CmdFunc != nil {
		return *x.CmdFunc
	}
	return 0
}

func (x *Header) GetCmdId() int32 {
	if x != nil && x.CmdId != nil {
		return *x.CmdId
	}
	return 0
}

func (x *Header) GetDataLen() int32 {
	if x != nil && x.DataLen != nil {
		return *x.DataLen
	}
	return 0
}

func (x *Header) GetNeedAck() int32 {
	if x != nil && x.NeedAck != nil {
		return *x.NeedAck
	}
	return 0
}

func (x *Header) GetIsAck() int32 {
	if x != nil && x.IsAck != nil {
		return *x.IsAck
	}
	return 0
}

func (x *Header) GetSeq() int32 {
	if x != nil && x.Seq != nil {
		return *x.Seq
	}
	return 0
}

func (x *Header) GetProductId() int32 {
	if x != nil && x.ProductId != nil {
		return *x.ProductId
	}
	return 0
}

func (x *Header) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *Header) GetPayloadVer() int32 {
	if x != nil && x.PayloadVer != nil {
		return *x.PayloadVer
	}
	return 0
}

func (x *Header) GetTimeSnap() int32 {
	if x != nil && x.TimeSnap != nil {
		return *x.TimeSnap
	}
	return 0
}

func (x *Header) GetIsRwCmd() int32 {
	if x != nil && x.IsRwCmd != nil {
		return *x.IsRwCmd
	}
	return 0
}

func (x *Header) GetIsQueue() int32 {
	if x != nil && x.IsQueue != nil {
		return *x.IsQueue
	}
	return 0
}

func (x *Header) GetAckType() int32 {
	if x != nil && x.AckType != nil {
		return *x.AckType
	}
	return 0
}

func (x *Header) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *Header) GetFrom() string {
	if x != nil && x.From != nil {
		return *x.From
	}
	return ""
}

func (x *Header) GetModuleSn() string {
	if x != nil && x.ModuleSn != nil {
		return *x.ModuleSn
	}
	return ""
}

func (x *Header) GetDeviceSn() string {
	if x != nil && x.DeviceSn != nil {
		return *x.DeviceSn
	}
	return ""
}

type SendHeaderMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Msg           *Header                `protobuf:"bytes,1,opt,name=msg,proto3,oneof" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendHeaderMsg) Reset() {
	*x = SendHeaderMsg{}
	mi := &file_ecopacket_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendHeaderMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendHeaderMsg) ProtoMessage() {}

func (x *SendHeaderMsg) ProtoReflect() protoreflect.Message {
	mi := &file_ecopacket_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendHeaderMsg.ProtoReflect.Descriptor instead.
func (*SendHeaderMsg) Descriptor() ([]byte, []int) {
	return file_ecopacket_proto_rawDescGZIP(), []int{1}
}

func (x *SendHeaderMsg) GetMsg() *Header {
	if x != nil {
		return x.Msg
	}
	return nil
}

type SendMsgHart struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LinkId        *int32                 `protobuf:"varint,1,opt,name=link_id,json=linkId,proto3,oneof" json:"link_id,omitempty"`
	Src           *int32                 `protobuf:"varint,2,opt,name=src,proto3,oneof" json:"src,omitempty"`
	Dest          *int32                 `protobuf:"varint,3,opt,name=dest,proto3,oneof" json:"dest,omitempty"`
	DSrc          *int32                 `protobuf:"varint,4,opt,name=d_src,json=dSrc,proto3,oneof" json:"d_src,omitempty"`
	DDest         *int32                 `protobuf:"varint,5,opt,name=d_dest,json=dDest,proto3,oneof" json:"d_dest,omitempty"`
	EncType       *int32                 `protobuf:"varint,6,opt,name=enc_type,json=encType,proto3,oneof" json:"enc_type,omitempty"`
	CheckType     *int32                 `protobuf:"varint,7,opt,name=check_type,json=checkType,proto3,oneof" json:"check_type,omitempty"`
	CmdFunc       *int32                 `protobuf:"varint,8,opt,name=cmd_func,json=cmdFunc,proto3,oneof" json:"cmd_func,omitempty"`
	CmdId         *int32                 `protobuf:"varint,9,opt,name=cmd_id,json=cmdId,proto3,oneof" json:"cmd_id,omitempty"`
	DataLen       *int32                 `protobuf:"varint,10,opt,name=data_len,json=dataLen,proto3,oneof" json:"data_len,omitempty"`
	NeedAck       *int32                 `protobuf:"varint,11,opt,name=need_ack,json=needAck,proto3,oneof" json:"need_ack,omitempty"`
	IsAck         *int32                 `protobuf:"varint,12,opt,name=is_ack,json=isAck,proto3,oneof" json:"is_ack,omitempty"`
	AckType       *int32                 `protobuf:"varint,13,opt,name=ack_type,json=ackType,proto3,oneof" json:"ack_type,omitempty"`
	Seq           *int32                 `protobuf:"varint,14,opt,name=seq,proto3,oneof" json:"seq,omitempty"`
	TimeSnap      *int32                 `protobuf:"varint,15,opt,name=time_snap,json=timeSnap,proto3,oneof" json:"time_snap,omitempty"`
	IsRwCmd       *int32                 `protobuf:"varint,16,opt,name=is_rw_cmd,json=isRwCmd,proto3,oneof" json:"is_rw_cmd,omitempty"`
	IsQueue       *int32                 `protobuf:"varint,17,opt,name=is_queue,json=isQueue,proto3,oneof" json:"is_queue,omitempty"`
	ProductId     *int32                 `protobuf:"varint,18,opt,name=product_id,json=productId,proto3,oneof" json:"product_id,omitempty"`
	Version       *int32                 `protobuf:"varint,19,opt,name=version,proto3,oneof" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendMsgHart) Reset() {
	*x = SendMsgHart{}
	mi := &file_ecopacket_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMsgHart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMsgHart) ProtoMessage() {}

func (x *SendMsgHart) ProtoReflect() protoreflect.Message {
	mi := &file_ecopacket_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMsgHart.ProtoReflect.Descriptor instead.
func (*SendMsgHart) Descriptor() ([]byte, []int) {
	return file_ecopacket_proto_rawDescGZIP(), []int{2}
}

func (x *SendMsgHart) GetLinkId() int32 {
	if x != nil && x.LinkId != nil {
		return *x.LinkId
	}
	return 0
}

func (x *SendMsgHart) GetSrc() int32 {
	if x != nil && x.Src != nil {
		return *x.Src
	}
	return 0
}

func (x *SendMsgHart) GetDest() int32 {
	if x != nil && x.Dest != nil {
		return *x.Dest
	}
	return 0
}

func (x *SendMsgHart) GetDSrc() int32 {
	if x != nil && x.DSrc != nil {
		return *x.DSrc
	}
	return 0
}

func (x *SendMsgHart) GetDDest() int32 {
	if x != nil && x.DDest != nil {
		return *x.DDest
	}
	return 0
}

func (x *SendMsgHart) GetEncType() int32 {
	if x != nil && x.EncType != nil {
		return *x.EncType
	}
	return 0
}

func (x *SendMsgHart) GetCheckType() int32 {
	if x != nil && x.CheckType != nil {
		return *x.CheckType
	}
	return 0
}

func (x *SendMsgHart) GetCmdFunc() int32 {
	if x != nil && x.CmdFunc != nil {
		return *x.CmdFunc
	}
	return 0
}

func (x *SendMsgHart) GetCmdId() int32 {
	if x != nil && x.CmdId != nil {
		return *x.CmdId
	}
	return 0
}

func (x *SendMsgHart) GetDataLen() int32 {
	if x != nil && x.DataLen != nil {
		return *x.DataLen
	}
	return 0
}

func (x *SendMsgHart) GetNeedAck() int32 {
	if x != nil && x.NeedAck != nil {
		return *x.NeedAck
	}
	return 0
}

func (x *SendMsgHart) GetIsAck() int32 {
	if x != nil && x.IsAck != nil {
		return *x.IsAck
	}
	return 0
}

func (x *SendMsgHart) GetAckType() int32 {
	if x != nil && x.AckType != nil {
		return *x.AckType
	}
	return 0
}

func (x *SendMsgHart) GetSeq() int32 {
	if x != nil && x.Seq != nil {
		return *x.Seq
	}
	return 0
}

func (x *SendMsgHart) GetTimeSnap() int32 {
	if x != nil && x.TimeSnap != nil {
		return *x.TimeSnap
	}
	return 0
}

func (x *SendMsgHart) GetIsRwCmd() int32 {
	if x != nil && x.IsRwCmd != nil {
		return *x.IsRwCmd
	}
	return 0
}

func (x *SendMsgHart) GetIsQueue() int32 {
	if x != nil && x.IsQueue != nil {
		return *x.IsQueue
	}
	return 0
}

func (x *SendMsgHart) GetProductId() int32 {
	if x != nil && x.ProductId != nil {
		return *x.ProductId
	}
	return 0
}

func (x *SendMsgHart) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

var File_ecopacket_proto protoreflect.FileDescriptor

const file_ecopacket_proto_rawDesc = "" +
	"\n" +
	"\x0fecopacket.proto\"\xfe\a\n" +
	"\x06Header\x12\x19\n" +
	"\x05pdata\x18\x01 \x01(\fH\x00R\x05pdata\x88\x01\x01\x12\x15\n" +
	"\x03src\x18\x02 \x01(\x05H\x01R\x03src\x88\x01\x01\x12\x17\n" +
	"\x04dest\x18\x03 \x01(\x05H\x02R\x04dest\x88\x01\x01\x12\x18\n" +
	"\x05d_src\x18\x04 \x01(\x05H\x03R\x04dSrc\x88\x01\x01\x12\x1a\n" +
	"\x06d_dest\x18\x05 \x01(\x05H\x04R\x05dDest\x88\x01\x01\x12\x1e\n" +
	"\benc_type\x18\x06 \x01(\x05H\x05R\aencType\x88\x01\x01\x12\"\n" +
	"\n" +
	"check_type\x18\a \x01(\x05H\x06R\tcheckType\x88\x01\x01\x12\x1e\n" +
	"\bcmd_func\x18\b \x01(\x05H\aR\acmdFunc\x88\x01\x01\x12\x1a\n" +
	"\x06cmd_id\x18\t \x01(\x05H\bR\x05cmdId\x88\x01\x01\x12\x1e\n" +
	"\bdata_len\x18\n" +
	" \x01(\x05H\tR\adataLen\x88\x01\x01\x12\x1e\n" +
	"\bneed_ack\x18\v \x01(\x05H\n" +
	"R\aneedAck\x88\x01\x01\x12\x1a\n" +
	"\x06is_ack\x18\f \x01(\x05H\vR\x05isAck\x88\x01\x01\x12\x15\n" +
	"\x03seq\x18\x0e \x01(\x05H\fR\x03seq\x88\x01\x01\x12\"\n" +
	"\n" +
	"product_id\x18\x0f \x01(\x05H\rR\tproductId\x88\x01\x01\x12\x1d\n" +
	"\aversion\x18\x10 \x01(\x05H\x0eR\aversion\x88\x01\x01\x12$\n" +
	"\vpayload_ver\x18\x11 \x01(\x05H\x0fR\n" +
	"payloadVer\x88\x01\x01\x12 \n" +
	"\ttime_snap\x18\x12 \x01(\x05H\x10R\btimeSnap\x88\x01\x01\x12\x1f\n" +
	"\tis_rw_cmd\x18\x13 \x01(\x05H\x11R\aisRwCmd\x88\x01\x01\x12\x1e\n" +
	"\bis_queue\x18\x14 \x01(\x05H\x12R\aisQueue\x88\x01\x01\x12\x1e\n" +
	"\back_type\x18\x15 \x01(\x05H\x13R\aackType\x88\x01\x01\x12\x17\n" +
	"\x04code\x18\x16 \x01(\tH\x14R\x04code\x88\x01\x01\x12\x17\n" +
	"\x04from\x18\x17 \x01(\tH\x15R\x04from\x88\x01\x01\x12 \n" +
	"\tmodule_sn\x18\x18 \x01(\tH\x16R\bmoduleSn\x88\x01\x01\x12 \n" +
	"\tdevice_sn\x18\x19 \x01(\tH\x17R\bdeviceSn\x88\x01\x01B\b\n" +
	"\x06_pdataB\x06\n" +
	"\x04_srcB\a\n" +
	"\x05_destB\b\n" +
	"\x06_d_srcB\t\n" +
	"\a_d_destB\v\n" +
	"\t_enc_typeB\r\n" +
	"\v_check_typeB\v\n" +
	"\t_cmd_funcB\t\n" +
	"\a_cmd_idB\v\n" +
	"\t_data_lenB\v\n" +
	"\t_need_ackB\t\n" +
	"\a_is_ackB\x06\n" +
	"\x04_seqB\r\n" +
	"\v_product_idB\n" +
	"\n" +
	"\b_versionB\x0e\n" +
	"\f_payload_verB\f\n" +
	"\n" +
	"_time_snapB\f\n" +
	"\n" +
	"_is_rw_cmdB\v\n" +
	"\t_is_queueB\v\n" +
	"\t_ack_typeB\a\n" +
	"\x05_codeB\a\n" +
	"\x05_fromB\f\n" +
	"\n" +
	"_module_snB\f\n" +
	"\n" +
	"_device_sn\"7\n" +
	"\rSendHeaderMsg\x12\x1e\n" +
	"\x03msg\x18\x01 \x01(\v2\a.HeaderH\x00R\x03msg\x88\x01\x01B\x06\n" +
	"\x04_msg\"\xae\x06\n" +
	"\vSendMsgHart\x12\x1c\n" +
	"\alink_id\x18\x01 \x01(\x05H\x00R\x06linkId\x88\x01\x01\x12\x15\n" +
	"\x03src\x18\x02 \x01(\x05H\x01R\x03src\x88\x01\x01\x12\x17\n" +
	"\x04dest\x18\x03 \x01(\x05H\x02R\x04dest\x88\x01\x01\x12\x18\n" +
	"\x05d_src\x18\x04 \x01(\x05H\x03R\x04dSrc\x88\x01\x01\x12\x1a\n" +
	"\x06d_dest\x18\x05 \x01(\x05H\x04R\x05dDest\x88\x01\x01\x12\x1e\n" +
	"\benc_type\x18\x06 \x01(\x05H\x05R\aencType\x88\x01\x01\x12\"\n" +
	"\n" +
	"check_type\x18\a \x01(\x05H\x06R\tcheckType\x88\x01\x01\x12\x1e\n" +
	"\bcmd_func\x18\b \x01(\x05H\aR\acmdFunc\x88\x01\x01\x12\x1a\n" +
	"\x06cmd_id\x18\t \x01(\x05H\bR\x05cmdId\x88\x01\x01\x12\x1e\n" +
	"\bdata_len\x18\n" +
	" \x01(\x05H\tR\adataLen\x88\x01\x01\x12\x1e\n" +
	"\bneed_ack\x18\v \x01(\x05H\n" +
	"R\aneedAck\x88\x01\x01\x12\x1a\n" +
	"\x06is_ack\x18\f \x01(\x05H\vR\x05isAck\x88\x01\x01\x12\x1e\n" +
	"\back_type\x18\r \x01(\x05H\fR\aackType\x88\x01\x01\x12\x15\n" +
	"\x03seq\x18\x0e \x01(\x05H\rR\x03seq\x88\x01\x01\x12 \n" +
	"\ttime_snap\x18\x0f \x01(\x05H\x0eR\btimeSnap\x88\x01\x01\x12\x1f\n" +
	"\tis_rw_cmd\x18\x10 \x01(\x05H\x0fR\aisRwCmd\x88\x01\x01\x12\x1e\n" +
	"\bis_queue\x18\x11 \x01(\x05H\x10R\aisQueue\x88\x01\x01\x12\"\n" +
	"\n" +
	"product_id\x18\x12 \x01(\x05H\x11R\tproductId\x88\x01\x01\x12\x1d\n" +
	"\aversion\x18\x13 \x01(\x05H\x12R\aversion\x88\x01\x01B\n" +
	"\n" +
	"\b_link_idB\x06\n" +
	"\x04_srcB\a\n" +
	"\x05_destB\b\n" +
	"\x06_d_srcB\t\n" +
	"\a_d_destB\v\n" +
	"\t_enc_typeB\r\n" +
	"\v_check_typeB\v\n" +
	"\t_cmd_funcB\t\n" +
	"\a_cmd_idB\v\n" +
	"\t_data_lenB\v\n" +
	"\t_need_ackB\t\n" +
	"\a_is_ackB\v\n" +
	"\t_ack_typeB\x06\n" +
	"\x04_seqB\f\n" +
	"\n" +
	"_time_snapB\f\n" +
	"\n" +
	"_is_rw_cmdB\v\n" +
	"\t_is_queueB\r\n" +
	"\v_product_idB\n" +
	"\n" +
	"\b_versionb\x06proto3"

var (
	file_ecopacket_proto_rawDescOnce sync.Once
	file_ecopacket_proto_rawDescData []byte
)

func file_ecopacket_proto_rawDescGZIP() []byte {
	file_ecopacket_proto_rawDescOnce.Do(func() {
		file_ecopacket_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ecopacket_proto_rawDesc), len(file_ecopacket_proto_rawDesc)))
	})
	return file_ecopacket_proto_rawDescData
}

var file_ecopacket_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_ecopacket_proto_goTypes = []any{
	(*Header)(nil),        // 0: Header
	(*SendHeaderMsg)(nil), // 1: SendHeaderMsg
	(*SendMsgHart)(nil),   // 2: SendMsgHart
}
var file_ecopacket_proto_depIdxs = []int32{
	0, // 0: SendHeaderMsg.msg:type_name -> Header
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_ecopacket_proto_init() }
func file_ecopacket_proto_init() {
	if File_ecopacket_proto != nil {
		return
	}
	file_ecopacket_proto_msgTypes[0].OneofWrappers = []any{}
	file_ecopacket_proto_msgTypes[1].OneofWrappers = []any{}
	file_ecopacket_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ecopacket_proto_rawDesc), len(file_ecopacket_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ecopacket_proto_goTypes,
		DependencyIndexes: file_ecopacket_proto_depIdxs,
		MessageInfos:      file_ecopacket_proto_msgTypes,
	}.Build()
	File_ecopacket_proto = out.File
	file_ecopacket_proto_goTypes = nil
	file_ecopacket_proto_depIdxs = nil
}
